name: Build and Deploy

on:
  push:
    branches:
      - master
      - staging
      - live
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need full history for proper git operations

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true # runs 'bundle install' and caches gems

    - name: Install dependencies
      run: npm run setup

    - name: Build Electric Book
      run: npm run eb -- output --dontserve=true --deploy=true

    - name: Clone target repository and determine target branch
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        git clone https://${{ secrets.DEPLOY_TOKEN }}@github.com/alexmaughan/electric-book-server-template-automate.git target-repo
        cd target-repo
        
        SOURCE_BRANCH="${{ github.ref_name }}"
        TARGET_BRANCH="${SOURCE_BRANCH}"
        
        # Check if the source branch exists in target repo
        if git show-ref --verify --quiet refs/remotes/origin/${SOURCE_BRANCH}; then
          echo "Using exact branch match: ${SOURCE_BRANCH}"
          git checkout ${SOURCE_BRANCH}
        else
          # Handle master <-> main mapping
          if [[ "${SOURCE_BRANCH}" == "master" ]] && git show-ref --verify --quiet refs/remotes/origin/main; then
            echo "Source is master, but target repo has main. Using main branch."
            TARGET_BRANCH="main"
            git checkout main
          elif [[ "${SOURCE_BRANCH}" == "main" ]] && git show-ref --verify --quiet refs/remotes/origin/master; then
            echo "Source is main, but target repo has master. Using master branch."
            TARGET_BRANCH="master"
            git checkout master
          else
            echo "Creating new branch: ${SOURCE_BRANCH}"
            git checkout -b ${SOURCE_BRANCH}
          fi
        fi
        
        # Save the target branch name for later steps
        echo "TARGET_BRANCH=${TARGET_BRANCH}" >> $GITHUB_ENV

    - name: Deploy to target repository
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        cd target-repo
        
        # Configure git to use the token for authentication
        git config url."https://${{ secrets.DEPLOY_TOKEN }}@github.com/".insteadOf "https://github.com/"
        
        # Remove existing electric-book folder if it exists
        rm -rf public/electric-book
        
        # Create public directory if it doesn't exist
        mkdir -p public
        
        # Copy the built site to the public directory
        cp -r ../_site/electric-book public/
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Add changes and commit
        git add .
        
        # Check if there are any changes to commit
        if git diff --staged --quiet; then
          echo "No changes to deploy"
          exit 0
        fi
        
        git commit -m "Deploy from ${{ github.ref_name }} on ${{ github.repository }}"
        git push origin ${TARGET_BRANCH}

    - name: Deployment Summary
      run: |
        echo "‚úÖ Successfully deployed to electric-book-server-template-automate"
        echo "üìÅ Source branch: ${{ github.ref_name }}"
        echo "üìÅ Target branch: ${TARGET_BRANCH}"
        echo "üîó Target repository: alexmaughan/electric-book-server-template-automate"